/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from 'three'
import React, { useEffect } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = 'CharacterArmature|Death' | 'CharacterArmature|Duck' | 'CharacterArmature|HitReact' | 'CharacterArmature|Idle' | 'CharacterArmature|Jump' | 'CharacterArmature|Jump_Idle' | 'CharacterArmature|Jump_Land' | 'CharacterArmature|No' | 'CharacterArmature|Punch' | 'CharacterArmature|Run' | 'CharacterArmature|Run2' | 'CharacterArmature|Walk' | 'CharacterArmature|Wave' | 'CharacterArmature|Weapon' | 'CharacterArmature|Yes'
interface GLTFAction extends THREE.AnimationClip { name: ActionName }

type GLTFResult = GLTF & {
  nodes: {
    BlueDemon_1: THREE.SkinnedMesh
    BlueDemon_2: THREE.SkinnedMesh
    BlueDemon_3: THREE.SkinnedMesh
    BlueDemon_4: THREE.SkinnedMesh
    BlueDemon_5: THREE.SkinnedMesh
    BlueDemon_6: THREE.SkinnedMesh
    Root: THREE.Bone
  }
  materials: { PaletteMaterial001: THREE.MeshStandardMaterial }
  animations: GLTFAction[]
}

type BlueDemonModelProps = React.ComponentPropsWithoutRef<'group'>;

export default function BlueDemonModel(props: BlueDemonModelProps) {
  const group = React.useRef<THREE.Group>(null)
  // ATENÇÃO: O nome do arquivo GLB tem espaço. O gltfjsx pode ter escapado ou não.
  // Verifique o nome exato do arquivo "-transformed.glb" na pasta /public/models/
  const { scene, animations } = useGLTF('/models/Blue Demon-transformed.glb') as unknown as GLTFResult
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as unknown as GLTFResult
  const { actions, names } = useAnimations(animations, group)

  useEffect(() => {
    const actionToPlay = names.find(name => name.includes('Idle') || name.includes('Walk')) || names[0];
    if (actionToPlay && actions[actionToPlay]) {
      actions[actionToPlay]?.reset().fadeIn(0.5).play();
      return () => { actions[actionToPlay]?.fadeOut(0.5); };
    }
  }, [actions, names]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Root_Scene">
        <primitive object={nodes.Root} />
        <group name="BlueDemon" rotation={[-Math.PI / 2, 0, 0]} scale={54}> {/* scale original era 54 */}
          <skinnedMesh castShadow receiveShadow name="BlueDemon_1" geometry={nodes.BlueDemon_1.geometry} material={materials.PaletteMaterial001} skeleton={nodes.BlueDemon_1.skeleton} />
          <skinnedMesh castShadow receiveShadow name="BlueDemon_2" geometry={nodes.BlueDemon_2.geometry} material={materials.PaletteMaterial001} skeleton={nodes.BlueDemon_2.skeleton} />
          <skinnedMesh castShadow receiveShadow name="BlueDemon_3" geometry={nodes.BlueDemon_3.geometry} material={materials.PaletteMaterial001} skeleton={nodes.BlueDemon_3.skeleton} />
          <skinnedMesh castShadow receiveShadow name="BlueDemon_4" geometry={nodes.BlueDemon_4.geometry} material={materials.PaletteMaterial001} skeleton={nodes.BlueDemon_4.skeleton} />
          <skinnedMesh castShadow receiveShadow name="BlueDemon_5" geometry={nodes.BlueDemon_5.geometry} material={materials.PaletteMaterial001} skeleton={nodes.BlueDemon_5.skeleton} />
          <skinnedMesh castShadow receiveShadow name="BlueDemon_6" geometry={nodes.BlueDemon_6.geometry} material={materials.PaletteMaterial001} skeleton={nodes.BlueDemon_6.skeleton} />
        </group>
      </group>
    </group>
  )
}
useGLTF.preload('/models/Blue Demon-transformed.glb') // Verifique o nome do arquivo