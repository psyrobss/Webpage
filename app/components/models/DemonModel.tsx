/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import * as THREE from 'three'
import React, { useEffect } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = 'CharacterArmature|Death' | 'CharacterArmature|Fast_Flying' | 'CharacterArmature|Flying_Idle' | 'CharacterArmature|Headbutt' | 'CharacterArmature|HitReact' | 'CharacterArmature|No' | 'CharacterArmature|Punch' | 'CharacterArmature|Yes'
interface GLTFAction extends THREE.AnimationClip { name: ActionName }

type GLTFResult = GLTF & {
  nodes: {
    Demon_Flying001_1: THREE.SkinnedMesh
    Demon_Flying001_2: THREE.SkinnedMesh
    Demon_Flying001_3: THREE.SkinnedMesh
    Demon_Flying002_1: THREE.SkinnedMesh 
    Demon_Flying002_2: THREE.SkinnedMesh
    Demon_Flying002_3: THREE.SkinnedMesh
    Demon_Flying: THREE.SkinnedMesh // Malha principal do corpo
    Root: THREE.Bone
  }
  materials: {
    Black: THREE.MeshStandardMaterial
    Eye_White: THREE.MeshStandardMaterial
    Eye_Black: THREE.MeshStandardMaterial
    Demon_Main: THREE.MeshStandardMaterial
  }
  animations: GLTFAction[]
}

type DemonModelProps = React.ComponentPropsWithoutRef<'group'>;

export default function DemonModel(props: DemonModelProps) {
  const group = React.useRef<THREE.Group>(null)
  // Assumindo que Demon-LnflziKv4o.glb foi renomeado ou que o -transformed Ã© Demon-transformed.glb
  const { scene, animations } = useGLTF('/models/Demon-transformed.glb') as unknown as GLTFResult
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as unknown as GLTFResult
  const { actions, names } = useAnimations(animations, group)

  useEffect(() => {
    const actionToPlay = names.find(name => name.includes('Flying_Idle') || name.includes('Idle')) || names[0];
    if (actionToPlay && actions[actionToPlay]) {
      actions[actionToPlay]?.reset().fadeIn(0.5).play();
      return () => { actions[actionToPlay]?.fadeOut(0.5); };
    }
  }, [actions, names]);

  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Root_Scene">
        <primitive object={nodes.Root} />
        {/* Estrutura original do gltfjsx mantida, mas adicionado castShadow/receiveShadow */}
        <group name="Demon_Flying001" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
          <skinnedMesh castShadow receiveShadow name="Demon_Flying001_1" geometry={nodes.Demon_Flying001_1.geometry} material={materials.Black} skeleton={nodes.Demon_Flying001_1.skeleton} />
          <skinnedMesh castShadow receiveShadow name="Demon_Flying001_2" geometry={nodes.Demon_Flying001_2.geometry} material={materials.Eye_White} skeleton={nodes.Demon_Flying001_2.skeleton} />
          <skinnedMesh castShadow receiveShadow name="Demon_Flying001_3" geometry={nodes.Demon_Flying001_3.geometry} material={materials.Eye_Black} skeleton={nodes.Demon_Flying001_3.skeleton} />
        </group>
        <group name="Demon_Flying002" rotation={[-Math.PI / 2, 0, 0]} scale={100}>
          <skinnedMesh castShadow receiveShadow name="Demon_Flying002_1" geometry={nodes.Demon_Flying002_1.geometry} material={materials.Black} skeleton={nodes.Demon_Flying002_1.skeleton} />
          <skinnedMesh castShadow receiveShadow name="Demon_Flying002_2" geometry={nodes.Demon_Flying002_2.geometry} material={materials.Eye_White} skeleton={nodes.Demon_Flying002_2.skeleton} />
          <skinnedMesh castShadow receiveShadow name="Demon_Flying002_3" geometry={nodes.Demon_Flying002_3.geometry} material={materials.Demon_Main} skeleton={nodes.Demon_Flying002_3.skeleton} />
        </group>
        <skinnedMesh castShadow receiveShadow name="Demon_Flying" geometry={nodes.Demon_Flying.geometry} material={materials.Demon_Main} skeleton={nodes.Demon_Flying.skeleton} rotation={[-Math.PI / 2, 0, 0]} scale={100} />
      </group>
    </group>
  )
}
useGLTF.preload('/models/Demon-transformed.glb')